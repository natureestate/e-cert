import { ref, uploadBytes, getDownloadURL, deleteObject, listAll } from 'firebase/storage';
import { storage } from '../config/firebase';

export interface LogoInfo {
  url: string;
  fileName: string;
  fullPath: string;
  size: 'small' | 'medium' | 'large';
  uploadedAt: Date;
}

/**
 * ‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ß‡∏¥‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡πÉ‡∏ô Firebase Storage
 */
export class LogoStorageService {
  private static readonly LOGOS_PATH = 'company-logos';

  /**
   * ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Firebase Storage
   * @param file ‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
   * @param companyId ID ‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó (optional)
   * @returns ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß
   */
  static async uploadLogo(file: File, companyId?: string): Promise<LogoInfo> {
    try {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
      const timestamp = Date.now();
      const fileExtension = file.name.split('.').pop();
      const fileName = companyId 
        ? `${companyId}_${timestamp}.${fileExtension}`
        : `logo_${timestamp}.${fileExtension}`;
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á reference ‡πÉ‡∏ô Storage
      const logoRef = ref(storage, `${this.LOGOS_PATH}/${fileName}`);
      
      console.log('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏•‡πÇ‡∏Å‡πâ...', fileName);
      
      // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
      const snapshot = await uploadBytes(logoRef, file);
      console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', snapshot.metadata.fullPath);
      
      // ‡∏î‡∏∂‡∏á download URL
      const downloadURL = await getDownloadURL(logoRef);
      
      const logoInfo: LogoInfo = {
        url: downloadURL,
        fileName: file.name,
        fullPath: snapshot.metadata.fullPath,
        size: 'medium', // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        uploadedAt: new Date()
      };
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏•‡∏á localStorage ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
      this.saveLogoToLocalStorage(logoInfo);
      
      return logoInfo;
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏•‡πÇ‡∏Å‡πâ:', error);
      throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
    }
  }

  /**
   * ‡∏•‡∏ö‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏à‡∏≤‡∏Å Firebase Storage
   * @param fullPath path ‡πÄ‡∏ï‡πá‡∏°‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô Storage
   */
  static async deleteLogo(fullPath: string): Promise<void> {
    try {
      const logoRef = ref(storage, fullPath);
      await deleteObject(logoRef);
      console.log('‚úÖ ‡∏•‡∏ö‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', fullPath);
      
      // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å localStorage ‡∏î‡πâ‡∏ß‡∏¢
      this.removeLogoFromLocalStorage();
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÇ‡∏•‡πÇ‡∏Å‡πâ:', error);
      throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
    }
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó
   * @param companyId ID ‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó (optional)
   * @returns ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏•‡πÇ‡∏Å‡πâ
   */
  static async getCompanyLogos(companyId?: string): Promise<LogoInfo[]> {
    try {
      const logosRef = ref(storage, this.LOGOS_PATH);
      const result = await listAll(logosRef);
      
      const logos: LogoInfo[] = [];
      
      for (const itemRef of result.items) {
        // ‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ companyId ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ô‡∏±‡πâ‡∏ô
        if (companyId && !itemRef.name.startsWith(companyId)) {
          continue;
        }
        
        try {
          const downloadURL = await getDownloadURL(itemRef);
          logos.push({
            url: downloadURL,
            fileName: itemRef.name,
            fullPath: itemRef.fullPath,
            size: 'medium',
            uploadedAt: new Date() // ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å metadata ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á
          });
        } catch (error) {
          console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á URL ‡∏Ç‡∏≠‡∏á‡πÇ‡∏•‡πÇ‡∏Å‡πâ:', itemRef.name, error);
        }
      }
      
      return logos;
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏•‡πÇ‡∏Å‡πâ:', error);
      return [];
    }
  }

  /**
   * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏•‡∏á localStorage
   */
  static saveLogoToLocalStorage(logoInfo: LogoInfo): void {
    try {
      localStorage.setItem('currentLogo', JSON.stringify(logoInfo));
    } catch (error) {
      console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏•‡∏á localStorage:', error);
    }
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏à‡∏≤‡∏Å localStorage
   */
  static getLogoFromLocalStorage(): LogoInfo | null {
    try {
      const logoData = localStorage.getItem('currentLogo');
      if (logoData) {
        const logoInfo = JSON.parse(logoData);
        // ‡πÅ‡∏õ‡∏•‡∏á uploadedAt ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô Date object
        logoInfo.uploadedAt = new Date(logoInfo.uploadedAt);
        return logoInfo;
      }
      return null;
    } catch (error) {
      console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏à‡∏≤‡∏Å localStorage:', error);
      return null;
    }
  }

  /**
   * ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏à‡∏≤‡∏Å localStorage
   */
  private static removeLogoFromLocalStorage(): void {
    try {
      localStorage.removeItem('currentLogo');
    } catch (error) {
      console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏à‡∏≤‡∏Å localStorage:', error);
    }
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  static isValidImageFile(file: File): boolean {
    const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/svg+xml', 'image/webp'];
    return validTypes.includes(file.type);
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå (‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5MB)
   */
  static isValidFileSize(file: File): boolean {
    const maxSize = 5 * 1024 * 1024; // 5MB
    return file.size <= maxSize;
  }

  /**
   * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡∏ô‡∏≤‡∏î‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡πÉ‡∏ô localStorage
   */
  static updateLogoSize(size: 'small' | 'medium' | 'large'): void {
    const logoInfo = this.getLogoFromLocalStorage();
    if (logoInfo) {
      logoInfo.size = size;
      this.saveLogoToLocalStorage(logoInfo);
    }
  }
}
