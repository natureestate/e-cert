import { 
  getFirestore, 
  collection, 
  doc, 
  getDocs, 
  getDoc,
  addDoc, 
  updateDoc, 
  deleteDoc,
  query, 
  where, 
  orderBy,
  Timestamp,
  DocumentReference
} from 'firebase/firestore';
import { 
  getStorage, 
  ref, 
  uploadBytes, 
  getDownloadURL, 
  deleteObject 
} from 'firebase/storage';
import app from '../config/firebase';
import {
  Company,
  Customer,
  Project,
  Product,
  BatchNumber,
  Certificate,
  DropdownOption,
  FormDropdownData,
  COLLECTIONS
} from '../types/firestore';

const db = getFirestore(app);
const storage = getStorage(app);

// Helper function to convert Firestore timestamps
const convertTimestamp = (data: any) => {
  const converted = { ...data };
  Object.keys(converted).forEach(key => {
    if (converted[key] instanceof Timestamp) {
      converted[key] = converted[key].toDate();
    }
  });
  return converted;
};

// Generic CRUD Operations
export class FirestoreService {
  
  // Companies
  static async getCompanies(): Promise<Company[]> {
    const querySnapshot = await getDocs(
      query(collection(db, COLLECTIONS.COMPANIES), 
            where('isActive', '==', true))
    );
    const companies = querySnapshot.docs.map(doc => convertTimestamp({
      id: doc.id,
      ...doc.data()
    }) as Company);
    
    // Sort in memory ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ orderBy ‡πÉ‡∏ô Firestore
    return companies.sort((a, b) => a.name.localeCompare(b.name));
  }

  static async createCompany(company: Omit<Company, 'id' | 'createdAt' | 'updatedAt'>): Promise<string> {
    const now = new Date();
    const docRef = await addDoc(collection(db, COLLECTIONS.COMPANIES), {
      ...company,
      createdAt: now,
      updatedAt: now
    });
    return docRef.id;
  }

  // Customers
  static async getCustomers(): Promise<Customer[]> {
    const querySnapshot = await getDocs(
      query(collection(db, COLLECTIONS.CUSTOMERS), 
            where('isActive', '==', true))
    );
    const customers = querySnapshot.docs.map(doc => convertTimestamp({
      id: doc.id,
      ...doc.data()
    }) as Customer);
    
    // Sort in memory ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ orderBy ‡πÉ‡∏ô Firestore
    return customers.sort((a, b) => a.name.localeCompare(b.name));
  }

  static async createCustomer(customer: Omit<Customer, 'id' | 'createdAt' | 'updatedAt'>): Promise<string> {
    const now = new Date();
    const docRef = await addDoc(collection(db, COLLECTIONS.CUSTOMERS), {
      ...customer,
      createdAt: now,
      updatedAt: now
    });
    return docRef.id;
  }

  // Projects
  static async getProjects(): Promise<Project[]> {
    const querySnapshot = await getDocs(
      query(collection(db, COLLECTIONS.PROJECTS), 
            where('isActive', '==', true))
    );
    const projects = querySnapshot.docs.map(doc => convertTimestamp({
      id: doc.id,
      ...doc.data()
    }) as Project);
    
    // Sort in memory ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ orderBy ‡πÉ‡∏ô Firestore
    return projects.sort((a, b) => a.name.localeCompare(b.name));
  }

  static async getProjectsByCustomer(customerId: string): Promise<Project[]> {
    const querySnapshot = await getDocs(
      query(collection(db, COLLECTIONS.PROJECTS), 
            where('customerId', '==', customerId),
            where('isActive', '==', true))
    );
    const projects = querySnapshot.docs.map(doc => convertTimestamp({
      id: doc.id,
      ...doc.data()
    }) as Project);
    
    // Sort in memory ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ orderBy ‡πÉ‡∏ô Firestore
    return projects.sort((a, b) => a.name.localeCompare(b.name));
  }

  static async createProject(project: Omit<Project, 'id' | 'createdAt' | 'updatedAt'>): Promise<string> {
    const now = new Date();
    const docRef = await addDoc(collection(db, COLLECTIONS.PROJECTS), {
      ...project,
      createdAt: now,
      updatedAt: now
    });
    return docRef.id;
  }

  // Products
  static async getProducts(): Promise<Product[]> {
    const querySnapshot = await getDocs(
      query(collection(db, COLLECTIONS.PRODUCTS), 
            where('isActive', '==', true))
    );
    const products = querySnapshot.docs.map(doc => convertTimestamp({
      id: doc.id,
      ...doc.data()
    }) as Product);
    
    // Sort in memory ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ orderBy ‡πÉ‡∏ô Firestore
    return products.sort((a, b) => a.name.localeCompare(b.name));
  }

  static async createProduct(product: Omit<Product, 'id' | 'createdAt' | 'updatedAt'>): Promise<string> {
    const now = new Date();
    const docRef = await addDoc(collection(db, COLLECTIONS.PRODUCTS), {
      ...product,
      createdAt: now,
      updatedAt: now
    });
    return docRef.id;
  }

  // Batch Numbers
  static async getBatchNumbers(): Promise<BatchNumber[]> {
    const querySnapshot = await getDocs(
      query(collection(db, COLLECTIONS.BATCH_NUMBERS), 
            where('isActive', '==', true))
    );
    const batchNumbers = querySnapshot.docs.map(doc => convertTimestamp({
      id: doc.id,
      ...doc.data()
    }) as BatchNumber);
    
    // Sort in memory ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ orderBy ‡πÉ‡∏ô Firestore
    return batchNumbers.sort((a, b) => a.batchNumber.localeCompare(b.batchNumber));
  }

  static async createBatchNumber(batch: Omit<BatchNumber, 'id' | 'createdAt' | 'updatedAt'>): Promise<string> {
    const now = new Date();
    const docRef = await addDoc(collection(db, COLLECTIONS.BATCH_NUMBERS), {
      ...batch,
      createdAt: now,
      updatedAt: now
    });
    return docRef.id;
  }

  // Certificates
  static async getCertificates(): Promise<Certificate[]> {
    const querySnapshot = await getDocs(
      query(collection(db, COLLECTIONS.CERTIFICATES), 
            where('isActive', '==', true),
            orderBy('createdAt', 'desc'))
    );
    return querySnapshot.docs.map(doc => convertTimestamp({
      id: doc.id,
      ...doc.data()
    }) as Certificate);
  }

  static async createCertificate(certificate: Omit<Certificate, 'id' | 'createdAt' | 'updatedAt'>): Promise<string> {
    const now = new Date();
    const docRef = await addDoc(collection(db, COLLECTIONS.CERTIFICATES), {
      ...certificate,
      createdAt: now,
      updatedAt: now
    });
    return docRef.id;
  }

  static async updateCertificate(id: string, updates: Partial<Certificate>): Promise<void> {
    const docRef = doc(db, COLLECTIONS.CERTIFICATES, id);
    await updateDoc(docRef, {
      ...updates,
      updatedAt: new Date()
    });
  }

  // ‡∏•‡∏ö document ‡πÉ‡∏î‡πÜ ‡∏à‡∏≤‡∏Å collection
  static async deleteDocument(collectionName: string, documentId: string): Promise<void> {
    const docRef = doc(db, collectionName, documentId);
    await deleteDoc(docRef);
  }

  // Get dropdown data for forms
  static async getFormDropdownData(): Promise<FormDropdownData> {
    const [companies, customers, projects, products, batchNumbers] = await Promise.all([
      this.getCompanies(),
      this.getCustomers(),
      this.getProjects(),
      this.getProducts(),
      this.getBatchNumbers()
    ]);

    return {
      companies: companies.map(c => ({ value: c.id, label: c.name })),
      customers: customers.map(c => ({ value: c.id, label: c.name })),
      projects: projects.map(p => ({ value: p.id, label: `${p.name} - ${p.location}` })),
      products: products.map(p => ({ value: p.id, label: p.name })),
      batchNumbers: batchNumbers.map(b => ({ value: b.id, label: b.batchNumber }))
    };
  }

  // File Storage Operations
  static async uploadFile(file: File, path: string): Promise<string> {
    const storageRef = ref(storage, path);
    const snapshot = await uploadBytes(storageRef, file);
    return await getDownloadURL(snapshot.ref);
  }

  static async deleteFile(url: string): Promise<void> {
    const storageRef = ref(storage, url);
    await deleteObject(storageRef);
  }

  // Clear all data (for reset)
  static async clearAllData(): Promise<void> {
    try {
      console.log('üóëÔ∏è Clearing all data...');
      
      const [companies, customers, projects, products, batchNumbers, certificates] = await Promise.all([
        this.getCompanies(),
        this.getCustomers(),
        this.getProjects(),
        this.getProducts(),
        this.getBatchNumbers(),
        this.getCertificates()
      ]);

      // Delete all documents
      const deletePromises = [
        ...companies.map(item => this.deleteDocument(COLLECTIONS.COMPANIES, item.id)),
        ...customers.map(item => this.deleteDocument(COLLECTIONS.CUSTOMERS, item.id)),
        ...projects.map(item => this.deleteDocument(COLLECTIONS.PROJECTS, item.id)),
        ...products.map(item => this.deleteDocument(COLLECTIONS.PRODUCTS, item.id)),
        ...batchNumbers.map(item => this.deleteDocument(COLLECTIONS.BATCH_NUMBERS, item.id)),
        ...certificates.map(item => this.deleteDocument(COLLECTIONS.CERTIFICATES, item.id))
      ];

      await Promise.all(deletePromises);
      console.log('‚úÖ All data cleared');
    } catch (error) {
      console.error('Error clearing data:', error);
    }
  }

  // Initialize default data (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)
  static async initializeDefaultData(force = false): Promise<void> {
    try {
      // Check if data already exists
      const companies = await this.getCompanies();
      if (companies.length > 0 && !force) {
        console.log('Default data already exists');
        return;
      }

      if (force) {
        await this.clearAllData();
      }

      console.log('Creating default data...');

      // Create default company
      const companyId = await this.createCompany({
        name: '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏û‡∏£‡∏µ‡∏Ñ‡∏≤‡∏™‡∏ó‡πå‡∏Ñ‡∏≠‡∏ô‡∏Å‡∏£‡∏µ‡∏ï ‡∏à‡∏≥‡∏Å‡∏±‡∏î (‡∏°‡∏´‡∏≤‡∏ä‡∏ô)',
        address: '99/9 ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Ñ‡∏≠‡∏ô‡∏Å‡∏£‡∏µ‡∏ï ‡∏ñ‡∏ô‡∏ô‡∏û‡∏±‡∏í‡∏ô‡∏≤ ‡πÅ‡∏Ç‡∏ß‡∏á‡∏•‡∏∏‡∏°‡∏û‡∏¥‡∏ô‡∏µ ‡πÄ‡∏Ç‡∏ï‡∏õ‡∏ó‡∏∏‡∏°‡∏ß‡∏±‡∏ô ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£ 10330',
        phone: '02-123-4567',
        website: 'www.precast.co.th',
        isActive: true
      });

      // Create default customers
      const customerId1 = await this.createCustomer({
        name: '‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡∏£‡∏±‡∏Å‡∏ö‡πâ‡∏≤‡∏ô',
        phone: '081-234-5678',
        email: 'somchai@email.com',
        buyer: '‡∏ô‡∏≤‡∏¢‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ',
        isActive: true
      });

      const customerId2 = await this.createCustomer({
        name: '‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡πâ‡∏≤‡∏ô',
        phone: '089-765-4321',
        email: 'somying@email.com',
        buyer: '‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°',
        isActive: true
      });

      // Create additional test customer
      const customerId3 = await this.createCustomer({
        name: '‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
        phone: '02-555-1234',
        email: 'test@email.com',
        buyer: '‡∏ô‡∏≤‡∏¢‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏£‡∏∞‡∏ö‡∏ö',
        isActive: true
      });

      // Create default projects
      await this.createProject({
        name: '‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏™‡∏∏‡∏Ç',
        location: '123 ‡∏´‡∏°‡∏π‡πà 4 ‡∏ï.‡∏ö‡∏≤‡∏á‡∏£‡∏±‡∏Å ‡∏≠.‡πÄ‡∏°‡∏∑‡∏≠‡∏á ‡∏à.‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ 11000',
        customerId: customerId1,
        customerName: '‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡∏£‡∏±‡∏Å‡∏ö‡πâ‡∏≤‡∏ô',
        description: '‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß 50 ‡∏´‡∏•‡∏±‡∏á',
        isActive: true
      });

      await this.createProject({
        name: '‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏î‡∏°‡∏¥‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡∏™‡∏°‡∏±‡∏¢‡πÉ‡∏´‡∏°‡πà',
        location: '456 ‡∏ñ‡∏ô‡∏ô‡∏£‡∏±‡∏ä‡∏î‡∏≤ ‡πÅ‡∏Ç‡∏ß‡∏á‡∏•‡∏≤‡∏î‡∏¢‡∏≤‡∏ß ‡πÄ‡∏Ç‡∏ï‡∏à‡∏ï‡∏∏‡∏à‡∏±‡∏Å‡∏£ ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10900',
        customerId: customerId2,
        customerName: '‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡πâ‡∏≤‡∏ô',
        description: '‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏™‡∏π‡∏á 30 ‡∏ä‡∏±‡πâ‡∏ô',
        isActive: true
      });

      // Create additional test projects
      await this.createProject({
        name: '‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß',
        location: '789 ‡∏ñ‡∏ô‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡πÅ‡∏Ç‡∏ß‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡πÄ‡∏Ç‡∏ï‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10100',
        customerId: customerId3,
        customerName: '‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
        description: '‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö',
        isActive: true
      });

      await this.createProject({
        name: '‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î',
        location: '321 ‡∏ñ‡∏ô‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö2 ‡πÅ‡∏Ç‡∏ß‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö2 ‡πÄ‡∏Ç‡∏ï‡∏ó‡∏î‡∏™‡∏≠‡∏ö2 ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10200',
        customerId: customerId3,
        customerName: '‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
        description: '‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà 2',
        isActive: true
      });

      // Create default products
      const productId1 = await this.createProduct({
        name: '‡πÅ‡∏ú‡πà‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        category: '‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á',
        description: '‡πÅ‡∏ú‡πà‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏π‡∏õ Precast Concrete',
        defaultWarrantyYears: 3,
        isActive: true
      });

      const productId2 = await this.createProduct({
        name: '‡∏ú‡∏ô‡∏±‡∏á‡∏£‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å',
        category: '‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á',
        description: '‡∏ú‡∏ô‡∏±‡∏á‡∏£‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Precast Concrete',
        defaultWarrantyYears: 3,
        isActive: true
      });

      // Create default batch numbers
      await this.createBatchNumber({
        batchNumber: 'BATCH-2024-08-A01',
        productId: productId1,
        productName: '‡πÅ‡∏ú‡πà‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        productionDate: new Date('2024-08-01'),
        quantity: 100,
        notes: '‡∏ú‡∏•‡∏¥‡∏ï‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ï‡πâ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô',
        isActive: true
      });

      await this.createBatchNumber({
        batchNumber: 'BATCH-2024-08-B01',
        productId: productId2,
        productName: '‡∏ú‡∏ô‡∏±‡∏á‡∏£‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å',
        productionDate: new Date('2024-08-15'),
        quantity: 50,
        notes: '‡∏ú‡∏•‡∏¥‡∏ï‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏Å‡∏•‡∏≤‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô',
        isActive: true
      });

      console.log('Default data created successfully!');
    } catch (error) {
      console.error('Error creating default data:', error);
    }
  }

  // Work Deliveries
  static async getWorkDeliveries(): Promise<any[]> {
    const querySnapshot = await getDocs(
      query(collection(db, COLLECTIONS.WORK_DELIVERIES), 
            where('isActive', '==', true),
            orderBy('createdAt', 'desc'))
    );
    return querySnapshot.docs.map(doc => convertTimestamp({
      id: doc.id,
      ...doc.data()
    }));
  }

  static async createWorkDelivery(delivery: any): Promise<string> {
    const now = new Date();
    const docRef = await addDoc(collection(db, COLLECTIONS.WORK_DELIVERIES), {
      ...delivery,
      createdAt: now,
      updatedAt: now
    });
    return docRef.id;
  }

  static async updateWorkDelivery(id: string, updates: any): Promise<void> {
    const docRef = doc(db, COLLECTIONS.WORK_DELIVERIES, id);
    await updateDoc(docRef, {
      ...updates,
      updatedAt: new Date()
    });
  }
}
